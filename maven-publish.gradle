def isAar = plugins.hasPlugin('com.android.library')

task sourcesJar(type: Jar) {
//    classifier = 'sources'
    archiveClassifier = 'sources'
    if (isAar) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.allSource
    }
}

if (!isAar) {
    task javadocJar(type: Jar) {
//        classifier = 'javadoc'
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }
}

publishing {
    publications {
        release(MavenPublication) {
            pom {
                name = project.name
                description = 'URouter'
                url = 'https://github.com/classops/URouter'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'classops'
                        name = 'ClassOps'
                        email = 'ClassOps@163.com'
                    }
                }

                // scm
                scm {
                    connection = 'https://github.com/classops/URouter.git'
                    developerConnection = 'https://github.com/classops/URouter.git'
                    url = 'https://github.com/classops/URouter'
                }
            }

            if (plugins.hasPlugin('com.android.library')) {
                // 发布源码 JAR
                artifact sourcesJar
                afterEvaluate {
                    from components.release
                }
            } else {
                // 发布文档 JAR
                artifact javadocJar
                // 发布源码 JAR
                artifact sourcesJar
                from components.java
            }
        }
    }

//    repositories {
//        mavenLocal()
//    }

    repositories {
        maven {
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username project.sonaUsername // sonatype username
                password project.sonaPassword // sonatype password
            }
        }
    }
}

afterEvaluate {

    signing {
        publishing.publications.each { publication ->
            println('sign publication: ' + publication.name)
            sign publication
        }
//        sign publishing.publications.release
//        sign publishing.publications.RouterPluginPluginMarkerMaven
//        sign configurations.archives
    }

}